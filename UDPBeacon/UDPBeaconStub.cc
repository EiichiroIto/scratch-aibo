//
//  UDPBeaconStub.cc
//  This file is generated by stubgen2.
//

//
// Copyright 2002 Sony Corporation 
//
// Permission to use, copy, modify, and redistribute this software for
// non-commercial use is hereby granted.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//

#ifndef OPENR_STUBGEN
#define OPENR_STUBGEN
#endif

#if defined(__GNUC__)
#include <apsys.h>
#endif
#include <MCOOP.h>
#include <ObjectEntryTable.h>
#include <OPENR/stub_macro.h>
#include "def.h"
#include "entry.h"
#include "UDPBeaconStub.h"

//
//  Object Core
//
#include "UDPBeacon.h"
UDPBeacon Self;

//
//  Stub Function Definitions
//
StubFuncDefine_Basic(Init)
StubFuncDefine_Basic(Start)
StubFuncDefine_Basic(Stop)
StubFuncDefine_Basic(Destroy)
StubFuncDefine_Control_nofunc(0)
StubFuncDefine_Ready_nofunc(0)
StubFuncDefine_Connect_nofunc(0)
StubFuncDefine_Notify(0, NotifySensor)
StubFuncDefine_Connect_nofunc(1)
StubFuncDefine_Notify(1, NotifyObjInfo)
StubFuncDefine_Connect_nofunc(2)
StubFuncDefine_Notify(2, NotifySTNInfo)

//
// Other definitions if any
//
extern "C" void
_SendCont(void* msg)
{
    Self.SendCont(msg);
    Return();
}

extern "C" void
_CloseCont(void* msg)
{
    Self.CloseCont(msg);
    Return();
}


//
// Set Entry Table
//
#if defined(__GNUC__)
GEN_ENTRY(_hookstub0, _Init);
GEN_ENTRY(_hookstub1, _Start);
GEN_ENTRY(_hookstub2, _Stop);
GEN_ENTRY(_hookstub3, _Destroy);
GEN_ENTRY(_controlstub0, 	_Control0);
GEN_ENTRY(_readystub0, 	_Ready0);
GEN_ENTRY(_connectstub0, 	_Connect0);
GEN_ENTRY(_notifystub0, 	_Notify0);
GEN_ENTRY(_connectstub1, 	_Connect1);
GEN_ENTRY(_notifystub1, 	_Notify1);
GEN_ENTRY(_connectstub2, 	_Connect2);
GEN_ENTRY(_notifystub2, 	_Notify2);
GEN_ENTRY(_SendContstub, 	_SendCont);
GEN_ENTRY(_CloseContstub, 	_CloseCont);
GEN_ENTRY(PrologueEntry, Prologue);

ObjectEntry	ObjectEntryTable[] = {
    {Entry_Hook[0], 	(Entry)_hookstub0},
    {Entry_Hook[1], 	(Entry)_hookstub1},
    {Entry_Hook[2], 	(Entry)_hookstub2},
    {Entry_Hook[3], 	(Entry)_hookstub3},
    {Entry_Control[0], 	(Entry)_controlstub0},
    {Entry_Ready[0], 	(Entry)_readystub0},
    {Entry_Connect[0], 	(Entry)_connectstub0},
    {Entry_Notify[0], 	(Entry)_notifystub0},
    {Entry_Connect[1], 	(Entry)_connectstub1},
    {Entry_Notify[1], 	(Entry)_notifystub1},
    {Entry_Connect[2], 	(Entry)_connectstub2},
    {Entry_Notify[2], 	(Entry)_notifystub2},
    {Extra_Entry[0], 	(Entry)_SendContstub},
    {Extra_Entry[1], 	(Entry)_CloseContstub},
    {UNDEF,            (Entry) ENTRY_UNDEF}
};
#else

//
//  Stub Function Pointer
//  
_Hook _hook[numOfHook] = { _Hook(Init), _Hook(Start), _Hook(Stop), _Hook(Destroy) };
_Control _control[numOfSubject]  = { _Control(0) };
_Ready   _ready  [numOfSubject]  = { _Ready(0) };
_Connect _connect[numOfObserver] = { _Connect(0), _Connect(1), _Connect(2) };
_Notify  _notify [numOfObserver] = { _Notify(0), _Notify(1), _Notify(2) };

ObjectEntry  ObjectEntryTable[] = {
    {Entry_Hook[0], 	(Entry) _Hook(Init)},
    {Entry_Hook[1], 	(Entry) _Hook(Start)},
    {Entry_Hook[2], 	(Entry) _Hook(Stop)},
    {Entry_Hook[3], 	(Entry) _Hook(Destroy)},
    {Entry_Control[0], 	(Entry) _Control(0)},
    {Entry_Ready[0], 	(Entry) _Ready(0)},
    {Entry_Connect[0], 	(Entry) _Connect(0)},
    {Entry_Connect[1], 	(Entry) _Connect(1)},
    {Entry_Connect[2], 	(Entry) _Connect(2)},
    {Entry_Notify[0], 	(Entry) _Notify(0)},
    {Entry_Notify[1], 	(Entry) _Notify(1)},
    {Entry_Notify[2], 	(Entry) _Notify(2)},
    {Extra_Entry[0], 	(Entry) _SendCont},
    {Extra_Entry[1], 	(Entry) _CloseCont},
    {UNDEF, 		(Entry) ENTRY_UNDEF}
};
#endif
